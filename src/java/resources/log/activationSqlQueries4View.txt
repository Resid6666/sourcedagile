create or replace VIEW CR_USER_LIST AS SELECT
 T.ID,
 T.STATUS,
 T.INSERT_DATE,
 T.MODIFICATION_DATE,
 T.FK_EMPLOYEE_ID,
 T.LI_USER_PERMISSION_CODE,
 '' USER_PERMISSION_CODE_NAME,
 T.TG_USER_ID,
 T.USERNAME,
 T.PASSWORD,
 T.USER_SHORT_ID,
 T.USER_IMAGE,
 T.USER_PERSON_NAME,
 T.USER_PERSON_SURNAME,
 T.USER_PERSON_MIDDLENAME,
 T.USER_BIRTH_DATE,
 T.USER_BIRTH_PLACE,
 T.FK_COMPANY_ID,
 T.SEX,
 '' SEX_NAME,
 T.OCCUPATION,
 T.MOBILE_1,
 T.MOBILE_2,
 T.TELEPHONE_1,
 T.TELEPHONE_2,
 T.EMAIL_1,
 T.EMAIL_2,
T.USER_STATUS,
 T.EXPIRE_DATE 
  FROM CR_USER T; 


#######


create OR REPLACE VIEW TM_REL_BACKLOG_AND_SPRINT_LIST AS SELECT
  T.ID,
  T.STATUS,
  T.INSERT_DATE,
  T.MODIFICATION_DATE,
  T.FK_BACKLOG_ID,
  BL.BACKLOG_NAME,
  BL.FK_PROJECT_ID,
  T.FK_TASK_SPRINT_ID,
  B.SPRINT_NAME AS SPRINT_NAME,
  B.SPRINT_COLOR AS SPRINT_COLOR 
  FROM TM_REL_BACKLOG_AND_SPRINT T,
  TM_TASK_SPRINT B,
  TM_BACKLOG BL 
  WHERE B.ID=T.FK_TASK_SPRINT_ID
  AND BL.ID=T.FK_BACKLOG_ID
  
  #######
  
  
create OR REPLACE VIEW TM_BACKLOG_TASK_LIST AS SELECT
T.ID,
T.STATUS,
T.INSERT_DATE,
T.MODIFICATION_DATE,
T.FK_PROJECT_ID,
T.FK_BACKLOG_ID,
T.FK_TASK_TYPE_ID,
(CASE WHEN T.IS_GENERAL=1 THEN 'General' ELSE (SELECT TYPE_NAME FROM TM_TASK_TYPE WHERE ID = T.FK_TASK_TYPE_ID LIMIT 0,1) END) AS TASK_TYPE_NAME,
T.FK_ASSIGNEE_ID,
( SELECT  (USER_PERSON_NAME) FROM CR_USER WHERE ID=T.FK_ASSIGNEE_ID) AS ASSIGNEE_NAME,
( SELECT  (USER_IMAGE) FROM CR_USER WHERE ID=T.FK_ASSIGNEE_ID) AS ASSIGNEE_IMAGE_URL,
'' BUG_COUNT,
'' UPDATE_COUNT,
T.CREATED_BY,
( SELECT USER_PERSON_NAME FROM CR_USER WHERE ID=T.CREATED_BY) AS CREATED_BY_NAME,
T.CREATED_DATE,
T.CREATED_TIME,
T.ESTIMATED_HOURS,
T.SPENT_HOURS,
T.DEPENDENT_TASK_TYPE_1_ID,
T.DEPENDENT_TASK_TYPE_2_ID,
(SELECT TYPE_NAME FROM TM_TASK_TYPE WHERE ID = T.DEPENDENT_TASK_TYPE_1_ID LIMIT 0,1) AS DEPENDENT_TASK_TYPE_1_NAME,
(SELECT TYPE_NAME FROM TM_TASK_TYPE WHERE ID = T.DEPENDENT_TASK_TYPE_2_ID LIMIT 0,1) AS DEPENDENT_TASK_TYPE_2_NAME,
T.COMPLETED_DURATION,
T.UPDATED_BY,
( SELECT USER_PERSON_NAME FROM CR_USER WHERE ID=T.UPDATED_BY) AS UPDATED_BY_NAME,
T.LAST_UPDATED_DATE,
T.LAST_UPDATED_TIME,
T.TASK_STATUS,
T.START_DATE,
T.START_TIME,
T.START_TYPE,
T.IS_NOTIFIED_BUG,
T.IS_DETECTED_BUG,
T.IS_GENERAL,
T.TASK_DUE_DATE,
T.TASK_PRIORITY,
T.JIRA_ISSUE_ID,
T.ESTIMATED_COUNTER,
T.EXECUTED_COUNTER,
T.ESTIMATED_BUDGET,
T.SPENT_BUDGET,
T.JIRA_ISSUE_KEY,
T.IS_UPDATE_REQUIRED
FROM TM_BACKLOG_TASK T;


  #######
  
  
create OR REPLACE VIEW TM_BACKLOG_LIST AS SELECT  
ID,
STATUS,
INSERT_DATE,
MODIFICATION_DATE,
TASK_COUNT,
INPUT_COUNT,
BUG_COUNT,
UPDATE_COUNT,
COMMENT_COUNT,
BACKLOG_NAME,
BACKLOG_BECAUSE,
BACKLOG_STATUS,
CREATED_BY,
FK_PROJECT_ID,
(SELECT PROJECT_NAME FROM  TM_PROJECT U  WHERE U.ID = T.FK_PROJECT_ID) AS PROJECT_NAME,
(SELECT  USER_PERSON_NAME FROM CR_USER U  WHERE U.ID = T.CREATED_BY) AS CREATED_BY_NAME,
CREATED_DATE,
CREATED_TIME,
BACKLOG_NO,
ORDER_NO,
IS_FROM_CUSTOMER,
PRIORITY,
FK_SOURCED_ID,
ESTIMATED_HOURS,
SPENT_HOURS,
RUN_IN_BACKEND,
BACKEND_PLATFORM,
"" SPRINT_NAME,
"" LABEL_NAME,
"" as ASSIGNEE_NAME,
IS_SOURCED,
(SELECT BACKLOG_NAME FROM TM_BACKLOG TP WHERE TP.ID=T.FK_SOURCED_ID LIMIT 0,1) AS SOURCED_NAME,
(CASE   WHEN (FK_SOURCED_ID = '' || fk_sourced_id is null)  &&  (IS_SOURCED<>'1' || is_sourced='' || is_sourced is null) && (IS_FROM_CUSTOMER <>'1') THEN 1  ELSE 0   END) as IS_INITIAL,
(CASE   WHEN FK_SOURCED_ID <> ''    THEN 1  ELSE 0   END) as IS_BOUNDED,
IS_API,
PARAM_1,
PARAM_2,
PARAM_3,
JIRA_ID,
JIRA_KEY,
FK_OWNER_ID,
SHOW_PROTOTYPE,
API_ACTION,
API_SYNC_REQUEST,
DESCRIPTION_SOURCED,
ESTIMATED_COUNTER,
EXECUTED_COUNTER,
ESTIMATED_BUDGET,
SPENT_BUDGET,
DESCRIPTION
 FROM TM_BACKLOG T;

  
  #######
  create OR REPLACE VIEW TM_BACKLOG_LIST_WITH_TASK AS 
SELECT
T.ID,
T.STATUS,
T.INSERT_DATE,
T.MODIFICATION_DATE,
T.TASK_COUNT,
T.INPUT_COUNT,
T.BUG_COUNT,
T.UPDATE_COUNT,
T.COMMENT_COUNT,
T.BACKLOG_NAME,
T.BACKLOG_BECAUSE,
T.BACKLOG_STATUS,
T.CREATED_BY,
T.FK_PROJECT_ID,
(SELECT PROJECT_NAME FROM  TM_PROJECT U  WHERE U.ID = T.FK_PROJECT_ID) AS PROJECT_NAME,
(SELECT  USER_PERSON_NAME FROM CR_USER U  WHERE U.ID = T.CREATED_BY) AS CREATED_BY_NAME,
T.CREATED_DATE,
T.CREATED_TIME,
T.ORDER_NO,
T.IS_FROM_CUSTOMER,
T.PRIORITY,
T.FK_SOURCED_ID,
BT.ESTIMATED_HOURS,
BT.SPENT_HOURS,
iFnulL(SP.SPRINT_NAME,'NO SPRINT') SPRINT_NAME,
'' LABEL_NAME,
BT.assignee_name,
BT.FK_ASSIGNEE_ID,
BT.TASK_TYPE_NAME,
BT.FK_TASK_TYPE_ID,
BT.TASK_STATUS,
T.IS_SOURCED,
(SELECT BACKLOG_NAME FROM TM_BACKLOG TP WHERE TP.ID=T.FK_SOURCED_ID LIMIT 0,1) AS SOURCED_NAME,
(CASE   WHEN (FK_SOURCED_ID = '' || fk_sourced_id is null)  &&  (IS_SOURCED<>'1' || is_sourced='' || is_sourced is null) && (IS_FROM_CUSTOMER <>'1') THEN 1  ELSE 0   END) as IS_INITIAL,
(CASE   WHEN FK_SOURCED_ID <> ''    THEN 1  ELSE 0   END) as IS_BOUNDED,
T.DESCRIPTION_SOURCED,
T.DESCRIPTION
 FROM TM_BACKLOG T 
LEFT JOIN TM_BACKLOG_TASK_LIST BT ON  T.ID = BT.FK_BACKLOG_ID AND BT.STATUS='A' 
LEFT JOIN TM_REL_BACKLOG_AND_SPRINT_LIST SP ON SP.FK_BACKLOG_ID = T.ID AND SP.STATUS='A'
AND T.STATUS='A';
  
  
  #######
  create OR REPLACE VIEW TM_PROJECT_PERMISSION_LIST AS SELECT 
  ID,
  STATUS,
  INSERT_DATE,
  MODIFICATION_DATE,
  FK_PROJECT_ID,
  (SELECT PROJECT_NAME FROM TM_PROJECT WHERE ID=T.FK_PROJECT_ID) AS PROJECT_NAME,
  FK_USER_ID,
  (SELECT CONCAT(USER_PERSON_NAME) FROM CR_USER U  WHERE U.ID = T.fk_user_ID) AS USER_NAME,
  DESCRIPTION
   FROM TM_PROJECT_PERMISSION T;
  
  
  #######
create OR REPLACE VIEW TM_PROJECT_LIST AS SELECT
ID,
STATUS,
INSERT_DATE,
MODIFICATION_DATE,
PROJECT_CODE,
PROJECT_NAME,
START_DATE,
END_DATE,
FK_NETWORK_ID,
'' AS NETWORK_NAME,
PURPOSE,
DESCRIPTION
 FROM TM_PROJECT T;
  
  
  #######
  create OR REPLACE VIEW TM_TASK_LABEL_LIST AS SELECT 
  ID,
  STATUS,
  INSERT_DATE,
  MODIFICATION_DATE,
  FK_PROJECT_ID,
  NAME,
  (SELECT COUNT(ID) FROM  TM_REL_BACKLOG_AND_LABEL S WHERE STATUS='A' AND  S.FK_TASK_LABEL_ID=T.ID) BACKLOG_COUNT,
  IS_MENU,
  COLOR
   FROM TM_TASK_LABEL T;
  
  
  #######
  create OR REPLACE VIEW TM_TASK_SPRINT_LIST AS SELECT 
  ID,
  STATUS,
  INSERT_DATE,
  MODIFICATION_DATE,
  SPRINT_NAME,
  SPRINT_START_DATE,
  SPRINT_END_DATE,
  FK_PROJECT_ID,
  SPRINT_STATUS,
  SPRINT_COLOR,
  (SELECT COUNT(ID) FROM  TM_REL_BACKLOG_AND_SPRINT S WHERE STATUS='A' AND  S.FK_TASK_SPRINT_ID=T.ID) BACKLOG_COUNT,
  SPRINT_DESCRIPTION
   FROM TM_TASK_SPRINT T;
  
  
  #######

create OR REPLACE VIEW TM_TASK_COMMENT_LIST AS SELECT
ID,
STATUS,
INSERT_DATE,
MODIFICATION_DATE,
FK_BACKLOG_ID,
( SELECT CONCAT(USER_PERSON_NAME,' ',USER_PERSON_SURNAME,' ',USER_PERSON_MIDDLENAME) FROM CR_USER WHERE ID=T.FK_USER_ID) AS USERNAME,
( SELECT  USER_IMAGE FROM CR_USER WHERE ID=T.FK_USER_ID) AS AVATAR_URL,
FK_USER_ID,
COMMENT,
COMMENT_DATE,
COMMENT_TIME,
COMMENT_TYPE,
FK_TASK_ID,
IS_BUG,
IS_REQUEST,
IS_SUBTASK,
IS_NOTIFIED_BUG,
ESTIMATED_HOURS,
SPENT_HOURS,
UPDATED_BY,
LAST_UPDATED_DATE,
LAST_UPDATED_TIME,
COMMENT_JIRA_ID,
COMMENT_JIRA_KEY,
START_DATE,
START_TIME,
START_TYPE,
COMMENT_STATUS,
FK_PARENT_COMMENT_ID
 FROM TM_TASK_COMMENT T;
 
 
 
  
  #######
  
  
  
  create OR REPLACE VIEW TM_BACKLOG_HISTORY_LIST AS SELECT 
  T.ID,
  T.STATUS,
  T.INSERT_DATE,
  T.MODIFICATION_DATE,
  T.FK_PROJECT_ID,
  (SELECT PROJECT_NAME FROM  TM_PROJECT WHERE STATUS='A' AND ID=T.FK_PROJECT_ID) AS PROJECT_NAME,
  T.FK_BACKLOG_ID,
  T.HISTORY_TYPE,
  T.HISTORY_DATE,
  T.HISTORY_TIME,
  T.HISTORY_TELLER_ID,
  U.USER_PERSON_NAME AS HISTORY_TELLER_NAME,
  U.USER_IMAGE AS  HISTORY_TELLER_IMAGE,
  T.RELATION_ID,
  T.PARAM_1,
  T.PARAM_2,
  T.PARAM_3,
  T.HISTORY_BODY
  FROM TM_BACKLOG_HISTORY T, CR_USER U
  WHERE T.HISTORY_TELLER_ID=U.ID
  
  #######
  
  create OR REPLACE VIEW TM_REL_BACKLOG_AND_LABEL_LIST AS SELECT 
  T.ID,
  T.STATUS,
  T.INSERT_DATE,
  T.MODIFICATION_DATE,
  T.FK_BACKLOG_ID,
  (SELECT BACKLOG_NAME FROM  TM_BACKLOG B WHERE B.ID=T.FK_BACKLOG_ID) AS BACKLOG_NAME,
  T.FK_TASK_LABEL_ID,
  B.NAME AS LABEL_NAME,
  B.COLOR AS LABEL_COLOR 
  FROM TM_REL_BACKLOG_AND_LABEL T,
   TM_TASK_LABEL B
  WHERE B.ID=T.FK_TASK_LABEL_ID

  #######
  
  
  create OR REPLACE VIEW TM_BACKLOG_DEPENDENCY_LIST AS SELECT
  T.ID,
  T.STATUS,
  T.INSERT_DATE,
  T.MODIFICATION_DATE,
  T.FK_PROJECT_ID,
  T.FK_BACKLOG_ID,
  (SELECT BACKLOG_NAME FROM  TM_BACKLOG B WHERE B.ID=T.FK_BACKLOG_ID LIMIT 0,1) AS BACKLOG_NAME,
  T.FK_PARENT_BACKLOG_ID,
  (SELECT BACKLOG_NAME FROM TM_BACKLOG B WHERE B.ID=T.FK_PARENT_BACKLOG_ID LIMIT 0,1) AS PARENT_BACKLOG_NAME
  FROM TM_BACKLOG_DEPENDENCY T
  ;
  #######
  
  create OR REPLACE VIEW TM_TEST_TRIAL_LIST AS SELECT
  ID,
  STATUS,
  INSERT_DATE,
  MODIFICATION_DATE,
  FK_SCENARIO_ID,
  FK_CREATED_BY,
  (SELECT CONCAT(USER_PERSON_NAME,' ',USER_PERSON_SURNAME,' ',USER_PERSON_MIDDLENAME) FROM CR_USER U WHERE U.ID=T.FK_CREATED_BY) AS CREATED_BY_NAME,
  (SELECT USER_IMAGE FROM CR_USER U WHERE U.ID=T.FK_CREATED_BY) AS CREATED_BY_AVATAR,
  TRIAL_DATE,
  TRIAL_TIME,
  ACTUAL_RESULT,
  TRIAL_STATUS,
  FILE_NAME,
  FK_BACKLOG_ID,
  FK_TASK_ID,
  IS_NOTIFIED_AS_BUG,
  DESCRIPTION
   FROM TM_TEST_TRIAL T
  ;


  #######
  

create or replace view tm_project_count_list 
 AS SELECT
    `pro`.`ID` AS `ID`,
    `pro`.`STATUS` AS `STATUS`,
    `pro`.`INSERT_DATE` AS `INSERT_DATE`,
    `pro`.`MODIFICATION_DATE` AS `MODIFICATION_DATE`,
    `pro`.`PROJECT_NAME` AS `PROJECT_NAME`,
    (
    SELECT
        COUNT(`tm_backlog`.`ID`) AS `overal_count`
    FROM
        `tm_backlog`
    WHERE
        `tm_backlog`.`STATUS` = 'A' AND `tm_backlog`.`IS_FROM_CUSTOMER` <> 1 AND `tm_backlog`.`FK_PROJECT_ID` = `pro`.`ID`
 ) AS `overal_count`,
 (
    SELECT
        COUNT(`tm_backlog`.`ID`) AS `new_count`
    FROM
        `tm_backlog`
    WHERE
        `tm_backlog`.`STATUS` = 'A' AND `tm_backlog`.`IS_FROM_CUSTOMER` <> 1 AND `tm_backlog`.`BACKLOG_STATUS` = 'new' AND `tm_backlog`.`FK_PROJECT_ID` = `pro`.`ID`
) AS `new_count`,
(
    SELECT
        COUNT(`tm_backlog`.`ID`) AS `ongoing_count`
    FROM
        `tm_backlog`
    WHERE
        `tm_backlog`.`STATUS` = 'A' AND `tm_backlog`.`IS_FROM_CUSTOMER` <> 1 AND `tm_backlog`.`BACKLOG_STATUS` = 'ongoing' AND `tm_backlog`.`FK_PROJECT_ID` = `pro`.`ID`
) AS `ongoing_count`,
(
    SELECT
        COUNT(`tm_backlog`.`ID`) AS `closed_count`
    FROM
        `tm_backlog`
    WHERE
        `tm_backlog`.`STATUS` = 'A' AND `tm_backlog`.`IS_FROM_CUSTOMER` <> 1 AND `tm_backlog`.`BACKLOG_STATUS` = 'closed' AND `tm_backlog`.`FK_PROJECT_ID` = `pro`.`ID`
) AS `closed_count`,
(
    SELECT
        COUNT(`tm_backlog`.`ID`) AS `overal`
    FROM
        `tm_backlog`
    WHERE
        `tm_backlog`.`STATUS` = 'A' AND `tm_backlog`.`IS_FROM_CUSTOMER` = 1 AND `tm_backlog`.`FK_PROJECT_ID` = `pro`.`ID`
) AS `ticket_count`,
(
    SELECT
        COUNT(`tm_backlog`.`ID`) AS `overal`
    FROM
        `tm_backlog`
    WHERE
        `tm_backlog`.`STATUS` = 'A' AND `tm_backlog`.`IS_FROM_CUSTOMER` <> 1 AND `tm_backlog`.`IS_SOURCED` = 1 AND `tm_backlog`.`FK_PROJECT_ID` = `pro`.`ID`
) AS `sourced_count`,
(
    SELECT
        COUNT(`tm_backlog`.`ID`) AS `overal`
    FROM
        `tm_backlog`
    WHERE
        `tm_backlog`.`STATUS` = 'A' AND `tm_backlog`.`IS_FROM_CUSTOMER` <> 1 AND `tm_backlog`.`FK_SOURCED_ID` <> '' AND `tm_backlog`.`IS_SOURCED` <> 1 AND `tm_backlog`.`FK_PROJECT_ID` = `pro`.`ID`
) AS `bound_count`,
(
    SELECT
        COUNT(`tm_backlog`.`ID`) AS `overal`
    FROM
        `tm_backlog`
    WHERE
        `tm_backlog`.`STATUS` = 'A' AND `tm_backlog`.`IS_FROM_CUSTOMER` <> 1 AND(
            `tm_backlog`.`FK_SOURCED_ID` IS NULL OR `tm_backlog`.`FK_SOURCED_ID` = ''
        ) AND `tm_backlog`.`IS_SOURCED` <> 1 AND `tm_backlog`.`FK_PROJECT_ID` = `pro`.`ID`
) AS `initial_count`
FROM
    `tm_project` `pro`;

#######



    create OR REPLACE VIEW TM_TASK_SPRINT_LIST_FOR_TASK AS SELECT
ID,
STATUS,
INSERT_DATE,
MODIFICATION_DATE,
SPRINT_NAME,
SPRINT_START_DATE,
SPRINT_END_DATE,
FK_PROJECT_ID,
SPRINT_STATUS,
SPRINT_COLOR,
(SELECT COUNT(ID) FROM TM_REL_TASK_AND_SPRINT S WHERE STATUS='A' AND  S.FK_TASK_SPRINT_ID=T.ID) BACKLOG_COUNT,
SPRINT_DESCRIPTION
 FROM TM_TASK_SPRINT  T;


#######

create OR REPLACE VIEW TM_TASK_LABEL_LIST_FOR_TASK AS SELECT
ID,
STATUS,
INSERT_DATE,
MODIFICATION_DATE,
FK_PROJECT_ID,
NAME,
(SELECT COUNT(ID) FROM TM_REL_TASK_AND_LABEL S WHERE STATUS='A' AND  S.FK_TASK_LABEL_ID=T.ID) BACKLOG_COUNT,
IS_MENU,
COLOR
 FROM TM_TASK_LABEL_LIST  T;
 


#######




#######




#######




#######




#######




#######




#######




#######




#######




#######




#######




#######




#######


